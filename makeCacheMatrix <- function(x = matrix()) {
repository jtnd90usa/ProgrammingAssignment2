makeCacheMatrix <- function(x = matrix()) {        
    ## goal is to create special "matrix" object that can         
    ##cache its inverse        
    ## return: a list containing functions to        
    ## set matrix, get matrix, set inverse, get inverse                
    inv = NULL        
    set = function(y) {        
    ## use `<<-` to assign a value to an object in an environment         
    ## different from current environment                 
        x <<- y                
        inv <<- NULL        }        
        get = function() x        
        setinv = function(inverse) inv <<- inverse         
        getinv = function() inv        
        list(set=set, get=get, setinv=setinv, getinv=getinv)}
        cacheSolve <- function(x, ...) {        
        ##x is output of makeCacheMatrix        
        ## return: inverse of original matrix input to makeCacheMatrix()                
        inv = x$getinv()                
        ## if the inverse has already been calculated        
        if (!is.null(inv)){                
        ## get it from the cache and skips the computation                 
        message("getting cached data")                
        return(inv)        }                
        ## otherwise, calculate inverse         
        mat.data = x$get()        
        inv = solve(mat.data, ...)                
        ## sets value of the inverse in the cache via the setinv function        
        x$setinv(inv)                
        return(inv)}
